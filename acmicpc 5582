string1=[0]+list(input().strip())
string2=[0]+list(input().strip())
len1=len(string1)
len2=len(string2)

len_dp=max(len1,len2)
dp=[[0]*(len_dp+1) for _ in range(len_dp+1)]
max_val=0

for i in range(1,len1):
    for j in range(1,len2):
        if string1[i]==string2[j]:
            dp[i][j]=dp[i-1][j-1]+1
        max_val=max(max_val,dp[i][j])

print(max_val)

# 최장 공통부분 문자열 문제.
# 대표적인 dp 문제이면서 최장 공통 부분 수열과 구분되는 또 다른 문제.
# 최장 공통 부분 수열 같은 경우 반드시 붙어 있어야 한다는 조건은 없지만,
# 최장 공통 부분 문자열은 반드시 붙어 있어야 한다.
# 한 문자열을 기준으로 하고 다른 문자열을 한 글자씩 움직이면서 서로 같은 글자가 나온다면
# 그 전의 dp 배열에 1을 더한 값이 현재 dp 배열의 값.
# dp 테이블의 정의는 dp[i][j] = (1번 문자열의 i번째 글자와 j번째 글자까지의 LCS의 길이)
