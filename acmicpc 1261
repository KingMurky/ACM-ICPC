from heapq import heappush, heappop
import sys

dy=[1,-1,0,0]
dx=[0,0,-1,1]

def bfs(y,x):
    q=[]
    visited=[[False]*(m+1) for _ in range(n+1) ]
    visited[y][x]=True
    heappush(q,[0,0,0])
    while q:
        cost,y,x=heappop(q)
        if y==n-1 and x==m-1:
            print(cost)
            sys.exit()

        for i in range(4):
            ny=y+dy[i]
            nx=x+dx[i]
            if 0<=ny<n and 0<=nx<m and visited[ny][nx]==False:
                if graph[ny][nx]==0:
                    visited[ny][nx]=True
                    heappush(q,[cost,ny,nx])
                else:
                    visited[ny][nx]=True
                    heappush(q,[cost+1,ny,nx])

m,n=map(int,sys.stdin.readline().split())
graph=[]

for _ in range(n):
    temp=list(map(int,sys.stdin.readline().strip()))
    graph.append(temp)

bfs(0,0)

# 이 문제는 우선순위 큐와 bfs를 동시에 생각해내야 하는 문제
# 우선 그래프를 입력받고 나서, cost,y,x를 인자로 두고 bfs 함수를 실행
# 그래프가 1이면 벽으로 막혀있는 것이고 0인 것에 비해서 우선순위가 뒤로 밀림
# 왜? 최소의 비용으로 즉, 최소한으로 벽을 뚫고 목적지까지 도달해야하기 때문에
# 벽을 뚫지 않는 것이 우선순위가 높을 수 밖에 없어.
# 그럼에도 벽을 뚫어야만 이동이 가능한 상황이 온다면 그때에는 cost를 늘리는 거지
# 그렇게 계속 진행해서 목적지에 도달했을 때의 cost가 최종 답이 되는거야.
