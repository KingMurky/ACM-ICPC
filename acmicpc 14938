import heapq
import sys
INF=sys.maxsize
def dijkstra(start):
    queue=[]
    dist=[INF]*(n+1)
    dist[start]=0
    heapq.heappush(queue,[0,start])
    while queue:
        cur_wei,cur_node = heapq.heappop(queue)

        if dist[cur_node]<cur_wei:
            continue

        for wei,node in graph[cur_node]:
            new_wei=wei+cur_wei
            if new_wei<dist[node]:
                dist[node]=new_wei
                heapq.heappush(queue,[new_wei,node])
    return dist

n,m,r=map(int,sys.stdin.readline().split())
items=[0]+list(map(int,sys.stdin.readline().split()))
graph=[[] for _ in range(n+1)]

for i in range(r):
    a,b,l=map(int,sys.stdin.readline().split())
    graph[a].append([l,b])
    graph[b].append([l,a])

ans=-sys.maxsize

for i in range(1,n+1):
    dp=dijkstra(i)
    temp=0
    for j in range(1,n+1):
        if dp[j]!=INF and dp[j]<=m:
            temp+=items[j]
    ans=max(ans,temp)

print(ans)
