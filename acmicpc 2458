import sys
INF=sys.maxsize

n,m=map(int,input().split())
graph=[[INF]*(n+1) for _ in range(n+1)]

for i in range(m):
    a,b = map(int,input().split())
    graph[a][b]=1

for k in range(1,n+1):
    for i in range(1,n+1):
        for j in range(1,n+1):
            if graph[i][k]+graph[k][j]<graph[i][j]:
                graph[i][j] = graph[i][k] + graph[k][j]

ans=0

for i in range(1,n+1):
    cnt=0
    for j in range(1,n+1):
        if graph[j][i]!=INF:
            cnt+=1
    for k in range(1,n+1):
        if graph[i][k]!=INF:
            cnt+=1
    if cnt==n-1:
        ans+=1

print(ans)

# 처음에는 다익스트라로 하나하나 비교하려 했는데 너무 비효율적이라고 생각해서
# 주어진 n 값을 확인해보니 시간복잡도가 O(n^3)인 플로이드-와샬 알고리즘으로도
# 시간 초과가 나지 않을 것 같아서 이쪽으로 선회했다.
# 우선 플로이드-와샬을 이용해서 모든 정점간 거리를 저장하고
# 기준이되는 정점으로 향하는 거리와 그 정점에서 나머지 다른 정점으로 가는 거리를 계산해서
# 단 하나라도 거리가 INF 가 나오지 않으면 정답에 1을 더해주면 끝
